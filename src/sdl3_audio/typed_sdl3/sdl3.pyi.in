# type: ignore
from typing import TypeAlias

CallbackDef = TypeAlias

class tp:
    def __init__(self,*args):pass

char:TypeAlias = tp
short:TypeAlias = tp
int:TypeAlias = tp
ll:TypeAlias = tp
ubyte:TypeAlias = tp
ushort:TypeAlias = tp
uint:TypeAlias = tp
ull:TypeAlias = tp
u8:TypeAlias = tp
u16:TypeAlias = tp
u32:TypeAlias = tp
u64:TypeAlias = tp
i8:TypeAlias = tp
i16:TypeAlias = tp
i32:TypeAlias = tp
i64:TypeAlias = tp
float:TypeAlias = tp
double:TypeAlias = tp
char_p:TypeAlias = tp
bool:TypeAlias = tp
void:TypeAlias = tp

class p:
    def __class_getitem__(cls,key) -> type:
        return tp
class fp(p):
    pass

class struct:
    pass


# DEF_BEGIN

# SDL_stdinc
def SDL_free(mem:p)->void:...

# SDL_properties
SDL_PropertiesID:TypeAlias = u32

def SDL_SetPointerProperty(props: SDL_PropertiesID, name: char_p, value:p[void])->bool:...
def SDL_GetPointerProperty(props: SDL_PropertiesID, name: char_p, default_value:p[void])->p[void]:...

# SDL_mutex
class SDL_Semaphore(struct):
    pass

def SDL_CreateSemaphore(initial_value:u32)->p[SDL_Semaphore]:...
def SDL_DestroySemaphore(sem:p[SDL_Semaphore])->void:...
def SDL_WaitSemaphoreTimeout(sem:p[SDL_Semaphore], timeoutMS: i32)->bool:...
def SDL_SignalSemaphore(sem:p[SDL_Semaphore])->void:...
def SDL_GetSemaphoreValue(sem:p[SDL_Semaphore])->u32:...

# SDL_audio
SDL_AudioDeviceID:TypeAlias = u32
SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK = SDL_AudioDeviceID(0xFFFFFFFF)
SDL_AUDIO_DEVICE_DEFAULT_RECORDING = SDL_AudioDeviceID(0xFFFFFFFE)
SDL_AudioFormat:TypeAlias = u16
SDL_AUDIO_UNKNOWN = SDL_AudioFormat(0x0000)
SDL_AUDIO_U8      = SDL_AudioFormat(0x0008)
SDL_AUDIO_S8      = SDL_AudioFormat(0x8008)
SDL_AUDIO_S16LE   = SDL_AudioFormat(0x8010)
SDL_AUDIO_S16BE   = SDL_AudioFormat(0x9010)
SDL_AUDIO_S32LE   = SDL_AudioFormat(0x8020)
SDL_AUDIO_S32BE   = SDL_AudioFormat(0x9020)
SDL_AUDIO_F32LE   = SDL_AudioFormat(0x8120)
SDL_AUDIO_F32BE   = SDL_AudioFormat(0x9120)

class SDL_AudioSpec(struct):
    format: SDL_AudioFormat
    channels: int
    freq: int

class SDL_AudioStream(struct):
    pass

SDL_AudioStreamCallback:CallbackDef = fp[void, p[void], p[SDL_AudioStream], int, int]

def SDL_GetNumAudioDrivers()->int:...
def SDL_GetAudioDriver(index:int)->char_p:...
def SDL_GetCurrentAudioDriver()->char_p:...
def SDL_GetAudioRecordingDevices(count:p[int])->p[SDL_AudioDeviceID]:...
def SDL_GetAudioPlaybackDevices(count:p[int])->p[SDL_AudioDeviceID]:...
def SDL_GetAudioDeviceName(devid:SDL_AudioDeviceID)->char_p:...
def SDL_GetAudioDeviceFormat(devid:SDL_AudioDeviceID, spec:p[SDL_AudioSpec], sample_frames:p[int])->bool:...
def SDL_OpenAudioDevice(devid:SDL_AudioDeviceID ,spec: p[SDL_AudioSpec]) -> SDL_AudioDeviceID:...
def SDL_PauseAudioDevice(devid:SDL_AudioDeviceID) -> bool:...
def SDL_ResumeAudioDevice(devid:SDL_AudioDeviceID) -> bool:...
def SDL_AudioDevicePaused(devid:SDL_AudioDeviceID) -> bool:...
def SDL_GetAudioDeviceGain(devid:SDL_AudioDeviceID) -> float:...
def SDL_SetAudioDeviceGain(devid:SDL_AudioDeviceID, gain:float) -> bool:...
def SDL_CloseAudioDevice(devid:SDL_AudioDeviceID)->void:...
def SDL_BindAudioStream(devid:SDL_AudioDeviceID, stream:p[SDL_AudioStream])->bool:...
def SDL_UnbindAudioStream(stream:p[SDL_AudioStream])->void:...
def SDL_GetAudioStreamDevice(stream:p[SDL_AudioStream])->SDL_AudioDeviceID:...
def SDL_CreateAudioStream(src_spec:p[SDL_AudioSpec], dst_spec:p[SDL_AudioSpec]) -> p[SDL_AudioStream]:...
def SDL_GetAudioStreamProperties(stream:p[SDL_AudioStream]) -> SDL_PropertiesID:...
def SDL_GetAudioStreamFormat(stream:p[SDL_AudioStream], src_spec:p[SDL_AudioSpec], dst_spec:p[SDL_AudioSpec])->bool:...
def SDL_SetAudioStreamFormat(stream:p[SDL_AudioStream], src_spec:p[SDL_AudioSpec], dst_spec:p[SDL_AudioSpec])->bool:...
def SDL_GetAudioStreamGain(stream:p[SDL_AudioStream])->float:...
def SDL_SetAudioStreamGain(stream:p[SDL_AudioStream], gain:float)->bool:...
def SDL_GetAudioStreamFrequencyRatio(stream:p[SDL_AudioStream])->float:...
def SDL_SetAudioStreamFrequencyRatio(stream:p[SDL_AudioStream], ratio:float)->bool:...
def SDL_PutAudioStreamData(stream:p[SDL_AudioStream], buf:p, len:int)->bool:...
def SDL_GetAudioStreamData(stream:p[SDL_AudioStream], buf:p, len:int)->int:...
def SDL_GetAudioStreamAvailable(stream:p[SDL_AudioStream])->int:...
def SDL_GetAudioStreamQueued(stream:p[SDL_AudioStream])->int:...
def SDL_FlushAudioStream(stream:p[SDL_AudioStream])->bool:...
def SDL_ClearAudioStream(stream:p[SDL_AudioStream])->bool:...
def SDL_SetAudioStreamGetCallback(stream:p[SDL_AudioStream], callback: SDL_AudioStreamCallback, userdata: p)->bool:...
def SDL_SetAudioStreamPutCallback(stream:p[SDL_AudioStream], callback: SDL_AudioStreamCallback, userdata: p)->bool:...
def SDL_DestroyAudioStream(stream:p[SDL_AudioStream])->void:...
def SDL_LoadWAV(path:char_p, spec: p[SDL_AudioSpec], audio_buf: p[p[u8]], audio_len: p[u32])->bool:...
def SDL_MixAudio(dst:p[u8], src: p[u8], format:SDL_AudioFormat, len:u32, volume:float)->bool:...
def SDL_ConvertAudioSamples(src_spec:p[SDL_AudioSpec], src_data:p[u8], src_len:int, dst_spec:p[SDL_AudioSpec], dst_data:p[p[u8]], dst_len:p[int])->bool:...

# SDL_error
def SDL_GetError() -> char_p: ...

# SDL_init
SDL_InitFlags:TypeAlias = u32
SDL_INIT_AUDIO = SDL_InitFlags(0x00000010)

def SDL_Init(flags:SDL_InitFlags)-> bool:...
def SDL_WasInit(flags:SDL_InitFlags)-> SDL_InitFlags:...
def SDL_Quit() -> void:...

